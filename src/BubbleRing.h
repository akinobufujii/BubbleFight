#ifndef __AKI_BUBBLERING_H__
#define __AKI_BUBBLERING_H__

//////////////////////////////////////////////////
// バブルリング
// (主に自機が使う弾)
//////////////////////////////////////////////////
namespace Shot
{
	class CBubbleRing : public CBase
	{
	public:
		//////////////////////////////////////////////////
		// 定数
		//////////////////////////////////////////////////
		CONSTANT float	SPEED_MAX;			// 速さ上限
		CONSTANT float	POWER_MAX;			// 強さ上限
		CONSTANT float	POWER_MIN;			// 強さ下限
		CONSTANT float	BIG_SPEED;			// 大きくなるスピード
		CONSTANT BYTE	POINT_NUM;			// ポイントスプライト数
		CONSTANT USHORT	BUBBLE_ERASE_TIME;	// 消える時間
		CONSTANT LPSTR	MESH_PASS;			// メッシュパス

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CBubbleRing();
		CBubbleRing( const D3DXMATRIX* mat, const float power );

		// デストラクタ
		~CBubbleRing();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpDevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクト描画を行う
		//	・引数		
		//		- lpDevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	GetPos
		//	・説明		現在の位置情報を獲得
		//	・引数		なし
		//	・戻り値	現在の位置状態を返す
		//////////////////////////////////////////////////
		inline D3DXVECTOR3 GetPos() const
		{
			return m_mMat.GetPos() + m_lpMesh->GetCenter();
		}

		//////////////////////////////////////////////////
		//	・関数名	GetRadius
		//	・説明		メッシュの半径＋強さを足したものを獲得
		//	・引数		なし
		//	・戻り値	メッシュの半径＋強さを足したものを返す
		//////////////////////////////////////////////////
		inline float GetRadius() const
		{
			return m_lpMesh->GetRadius() + m_Power;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetPower
		//	・説明		このオブジェクトの強さを獲得
		//	・引数		なし
		//	・戻り値	このオブジェクトの強さを返す
		//////////////////////////////////////////////////
		inline float GetPower() const 
		{
			return m_RingMax;
		}

		//////////////////////////////////////////////////
		//	・関数名	SetPower
		//	・説明		このオブジェクトの強さを設定する
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		inline void SetPower( const float power )
		{
			m_RingMax = (power < POWER_MIN)? POWER_MIN : power;
		}

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		送られてきたオブジェクトに自分を送りつける
		//	・引数		
		//		- object	行動を起こして欲しいオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Dispatch( IDoubleDispatch* object);

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		敵に対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Enemy::CBase& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		プレイヤーに対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Player::CDolphin& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		ボスに対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Boss::CBase& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		弾に対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Shot::CBase& object );

	private:	// 非公開

		//////////////////////////////////////////////////
		// フィールド
		//////////////////////////////////////////////////
		DWORD				m_StartTime;		// 作られた時間
		BYTE				m_CreateBubbleNum;	// 泡を作れる
		CPointSpriteManager	m_Points;			// ポイントスプライト
		float				m_Power;			// 力(半径にも作用)
		float				m_Speed;			// 速さ
		float				m_RingMax;			// 最大スケール
		CXfile*				m_lpMesh;			// メッシュ
	};
}

#endif // __AKI_BUBBLERING_H__