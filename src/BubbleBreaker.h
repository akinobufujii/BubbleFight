#ifndef __AKI_BUBBLEBREAKER_H__
#define __AKI_BUBBLEBREAKER_H__

namespace Enemy
{
	/////////////////////////////////////
	// 泡に包まれている敵の泡を
	// 壊す(と言うよりは吸いとる)敵
	/////////////////////////////////////
	class CBubbleBreaker : public CBase
	{
	public:	// 外部公開

		/////////////////////////////////////
		// 定数
		/////////////////////////////////////
		CONSTANT float	SPEED;				// 速さ
		CONSTANT ULONG	SCORE;				// スコア
		CONSTANT LPSTR	MESHPASS_ENEMY;		// メッシュパス
		CONSTANT DWORD	MOVE_CHANGETIME;	// 動きを切り替える時間(ミリ秒単位)
		CONSTANT float	DIRCHANGE_ANIMETIME;// 方向切替のアニメーション加算時間
		CONSTANT BYTE	ROT_SPEED;			// 回転速度
		CONSTANT USHORT	AWAY_TIME;			// 逃げる時間
		CONSTANT USHORT	CHANGE_ATTACK_TIME;	// 攻撃に切り替える時間	

		/////////////////////////////////////
		// メソッド
		/////////////////////////////////////
		
		// コンストラクタ
		CBubbleBreaker( float x, float y, float z );

		// デストラクタ
		~CBubbleBreaker();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//		- is_shader	プログラマブルシェーダ描画するかどうか
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクトの描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		この敵のスコアを獲得
		//	・引数		なし
		//	・戻り値	この敵のスコアを返す
		//////////////////////////////////////////////////
		inline ULONG GetScore() const
		{
			return SCORE;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMesh
		//	・説明		メッシュ情報を獲得
		//	・引数		なし
		//	・戻り値	メッシュ情報を返す
		//////////////////////////////////////////////////
		inline const CXfile* GetMesh() const
		{
			return m_lpMesh;
		}

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		送られてきたオブジェクトに自分を送りつける
		//	・引数		
		//		- object	行動を起こして欲しいオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		inline void Dispatch( IDoubleDispatch* object )
		{
			object->Action( *this );
		}

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		敵に対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Enemy::CBase& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		プレイヤーに対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Player::CDolphin& object );

		//////////////////////////////////////////////////
		//	・関数名	SetDirEnemy
		//	・説明		この敵が追尾する敵を決定する
		//				ダウンキャストで呼ぶことを前提としている
		//	・引数		
		//		- enemy	追尾される敵のポインタ
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void SetDirEnemy( Enemy::CBase* enemy );

	private:	// 非公開

		/////////////////////////////////////
		// フィールド
		/////////////////////////////////////
		CFinTail		m_Tail;				// 尻尾（飾り）
		CXfile*			m_lpMesh;			// メッシュ
		bool			m_IsDirChange;		// 方向転換するか
		float			m_NowAnimetionCnt;	// アニメーションカウンタ(0.f〜1.f)
		DWORD			m_SaveTime;			// 時間保存用
		D3DXMATRIX		m_mSave;			// 最終アニメーション保存行列
		float			m_NowSpeed;			// 今の速さ
		Enemy::CBase*	m_lpTargetEnemy;	// 目標にしている敵
		bool			m_IsAway;			// 逃げるかどうか
		bool			m_IsAttack;			// 攻撃中かどうか
		DWORD			m_AwayStartTime;	// 逃げ始めた時間保存用
		DWORD			m_SaveDriveTime;	// 追い始めた時間記録

		/////////////////////////////////////
		// メソッド
		/////////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	UpdateAway
		//	・説明		逃げる更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateAway();

		//////////////////////////////////////////////////
		//	・関数名	UpdateMove
		//	・説明		動きまわる更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateMove();
	};
}

#endif	// __AKI_BUBBLEBREAKER_H__