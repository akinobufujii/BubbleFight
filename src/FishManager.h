#ifndef	__AKI_FISHMANAGER_H__
#define __AKI_FISHMANAGER_H__

//////////////////////////////////////////////////
// 不完全型宣言
//////////////////////////////////////////////////
class CObjectFish;
class CDamageObjectBase;
class CStoneManager;

//////////////////////////////////////////////////
// 魚マネージャー(物体管理)
//////////////////////////////////////////////////
class CFishManager
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 型宣言
	//////////////////////////////////////////////////
	typedef std::list<CObjectFish*>			OBJECTFISHLIST;	// 単なる飾りの魚リスト型
	typedef	std::list<CDamageObjectBase*>	DAMAGEFISHLIST;	// いじめられる魚シスト型

	//////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	enum OBJECTKIND
	{
		KIND_FISH,
		KINDMAX
	};

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CFishManager();

	// デストラクタ
	~CFishManager();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		全ての更新を行う
	//	・引数		
	//		- is_collision	衝突判定を行うかどうか
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update( bool is_collision = true );

	//////////////////////////////////////////////////
	//	・関数名	DrawObjectFish
	//	・説明		単なるオブジェクトの描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawObjectFish( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	DrawDamageFish
	//	・説明		襲われるオブジェクトの描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//		- is_shader	プログラマブルシェーダで描画するかどうか
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawDamageFish( const LPDIRECT3DDEVICE9 lp_device, bool is_shader );

	//////////////////////////////////////////////////
	//	・関数名	SetNumAndLimit
	//	・説明		単なるオブジェクトの産み出す数と
	//				範囲とy軸回転数を決める
	//				追加方式で生み出す
	//	・引数		
	//		- num		生み出す数
	//		- pos_limit	動く範囲
	//		- rot		回転角度(-1を渡すと、ランダムに回転する)
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetNumAndLimit( const int num, const D3DXVECTOR3& pos_limit, const int rot = -1 );
	
	//////////////////////////////////////////////////
	//	・関数名	LoadDamageFish
	//	・説明		ファイルから、
	//				襲われるオブジェクトの読み込みを行う
	//	・引数		
	//		- load_path	読み込むファイルのパス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void LoadDamageFish( LPCSTR load_path );

	//////////////////////////////////////////////////
	//	・関数名	AllRelease
	//	・説明		全てのオブジェクトの削除を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void AllRelease();

	//////////////////////////////////////////////////
	//	・関数名	SetRot
	//	・説明		単なるオブジェクトの回転角度を設定する
	//	・引数		
	//		- rot	回転角度
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetRot( const int rot );

	//////////////////////////////////////////////////
	//	・関数名	SetLimit
	//	・説明		単なるオブジェクトの移動制限を設定する
	//	・引数		
	//		- limit	範囲
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetLimit( const D3DXVECTOR3& limit )
	{
		m_MoveLimit = limit;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetMatrix
	//	・説明		単なるオブジェクトに影響する
	//				行列を設定する
	//	・引数		
	//		- rot	回転角度
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetMatrix( const D3DXMATRIX& mat )
	{
		m_Mat = mat;
	}

	//////////////////////////////////////////////////
	//	・関数名	IsAllOut
	//	・説明		単なるオブジェクトが
	//				視錐台から消えたかどうか調べる
	//	・引数		なし
	//	・戻り値	全て視錐台から消えていればtrue
	//				そうでなければfalseを返す
	//////////////////////////////////////////////////
	bool IsAllOut();

	//////////////////////////////////////////////////
	//	・関数名	GetDamageList
	//	・説明		襲われるオブジェクトリストを獲得
	//	・引数		なし
	//	・戻り値	襲われるオブジェクトリストを返す
	//////////////////////////////////////////////////
	inline DAMAGEFISHLIST* GetDamageList()
	{
		return &m_DamageObjectList;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetStoneManager
	//	・説明		衝突判定を行う岩マネージャーを設定する
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline static void SetStoneManager( CStoneManager* object )
	{
		m_lpStones = object;
	}

	//////////////////////////////////////////////////
	//	・関数名	GetStoneManager
	//	・説明		設定してある岩マネージャーを獲得
	//	・引数		なし
	//	・戻り値	岩マネージャーを返す
	//////////////////////////////////////////////////
	inline static CStoneManager* GetStoneManager()
	{
		return m_lpStones;
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	OBJECTFISHLIST			m_FishList;			// 魚リスト
	DAMAGEFISHLIST			m_DamageObjectList;	// 襲われるリスト
	CVector					m_MoveLimit;		// 移動制限
	CMatrix					m_Mat;				// 行列(全ての魚に影響)
	static CStoneManager*	m_lpStones;			// 岩		
};

#endif	// __AKI_FISHMANAGER_H__