#ifndef __AKI_POINTSPRITEMANAGER_H__
#define __AKI_POINTSPRITEMANAGER_H__

//////////////////////////////////////////////////
// ポイントスプライト
//////////////////////////////////////////////////
class CPointSpriteManager
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	
	// 更新方法
	enum UPDATETYPE
	{
		TYPE_POP,		// 弾ける形
		TYPE_SPOUT,		// 噴水
		TYPE_GRAVITYPOP	// 重力付きの弾ける形
	};

	CONSTANT DWORD	CUSTOM_FVF;		// 頂点フォーマット
	CONSTANT int	BYTE_SIZE;		// 構造体の大きさ
	CONSTANT float	DEFAULT_MAXSIZE;// 最大スケール
	CONSTANT float	GRAVITY_SPEED;	// 重力

	//////////////////////////////////////////////////
	// 内部構造体
	//////////////////////////////////////////////////
	struct POINTSPRITE
	{
		D3DXVECTOR3	Pos;	// 点の位置
		float		Scale;	// 大きさ
		DWORD		Color;	// 色
		
		// コンストラクタ
		POINTSPRITE():
			Pos(0, 0, 0),
			Scale(1.f),
			Color(0xffffffff){}
	};

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////
	
	// コンストラクタ
	CPointSpriteManager();

	// デストラクタ
	~CPointSpriteManager();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		今選択されている状態の更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update();

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		描画を行う
	//	・引数		
	//		- lpdevice	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9& lpdevice );

	//////////////////////////////////////////////////
	//	・関数名	SetType
	//	・説明		ポイントスプライトの更新方法を決定する
	//				一番最初に呼ぶ必要がある
	//	・引数		
	//		- type	更新方法を指定する
	//				UPDATETYPE列挙体から指定する
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetType( UPDATETYPE type );

	//////////////////////////////////////////////////
	//	・関数名	SetNum
	//	・説明		ポイントスプライトの数を決める
	//				SetTypeを呼んでから呼ぶ必要がある
	//	・引数		
	//		- num	ポイントスプライトの数
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetNum( const int num );

	//////////////////////////////////////////////////
	//	・関数名	SetPos
	//	・説明		ポイントスプライト出現位置を設定する
	//				SetNumを呼んでから呼ぶ必要がある
	//	・引数		
	//		- pos	出現位置(ワールド座標)
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetPos( const D3DXVECTOR3& pos );

	//////////////////////////////////////////////////
	//	・関数名	SetMove
	//	・説明		どれだけ動くか最大値を決める
	//				SetNumを呼んでから呼ぶ必要がある
	//	・引数		
	//		- move_max	動きの最大値
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetMove( const D3DXVECTOR3& move_max );

	//////////////////////////////////////////////////
	//	・関数名	SetMove
	//	・説明		どれだけ動くか最大値を決める
	//				SetNumを呼んでから呼ぶ必要がある
	//	・引数		
	//		- move_max	動きの最大値
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetEraseTime( const DWORD time );
	
	//////////////////////////////////////////////////
	//	・関数名	SetTexture
	//	・説明		ポイントスプライトに貼り付ける
	//				テクスチャを設定する
	//	・引数		
	//		- tex	貼り付けるテクスチャ
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetTexture( const LPDIRECT3DTEXTURE9 tex )
	{
		m_lpTex = tex;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetScaleMax
	//	・説明		最大拡大率を設定する
	//	・引数		
	//		- rate	最大拡大率
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetScaleMax( const float rate )
	{
		m_ScaleMax = rate;
	}

	//////////////////////////////////////////////////
	//	・関数名	GetSprites
	//	・説明		ポイントスプライト配列の先頭を獲得
	//	・引数		なし
	//	・戻り値	ポイントスプライト配列の先頭を返す
	//////////////////////////////////////////////////
	inline const POINTSPRITE* GetSprites() const
	{
		return &m_Sprite.front();
	}

	//////////////////////////////////////////////////
	//	・関数名	IsErase
	//	・説明		全てが消えたかどうかを判断する
	//	・引数		なし
	//	・戻り値	すべて消えていればtrue
	//				そうでなければfalseを返す
	//////////////////////////////////////////////////
	bool IsErase();

	//////////////////////////////////////////////////
	//	・関数名	Reset
	//	・説明		全てリセットする
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Reset()
	{
		SetPos( m_SavePos );
		SetMove( m_SaveMoveMax );
		m_SaveTime	= timeGetTime();
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// 型定義
	//////////////////////////////////////////////////
	typedef void (CPointSpriteManager::*FPUPDATE)();	// 更新方法の関数ポインタ

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	std::vector<POINTSPRITE>	m_Sprite;		// ポイントスプライト動的配列
	std::vector<D3DXVECTOR3>	m_MoveDir;		// 動き
	std::vector<DWORD>			m_StartTimes;	// 更新開始時間保存用
	LPDIRECT3DTEXTURE9			m_lpTex;		// テクスチャ
	int							m_Num;			// パーティクル数
	int							m_UpdateNum;	// 更新数(噴水系で使用)
	float						m_ScaleMax;		// 大きさ
	float						m_NowGravity;	// 今の重力
	D3DXVECTOR3					m_SavePos;		// 保存用
	D3DXVECTOR3					m_SaveMoveMax;	// 動ける範囲保存用
	DWORD						m_EraseTime;	// 消える時間
	DWORD						m_SaveTime;		// 時間
	DWORD						m_EndTime;		// 終了時間
	float						m_AlphaCnt;		// アルファ値
	UPDATETYPE					m_NowType;		// 更新方法
	FPUPDATE					m_fpUpdateFunc;	// 更新関数ポインタ
	CEffect*					m_lpShader;		// 描画用シェーダ

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	//////////////////////////////////////////////////
	//	・関数名	UpdatePop
	//	・説明		弾ける更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void UpdatePop();

	//////////////////////////////////////////////////
	//	・関数名	UpdateSpout
	//	・説明		噴水更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void UpdateSpout();

	//////////////////////////////////////////////////
	//	・関数名	UpdateGravityPop
	//	・説明		重力付き弾ける更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void UpdateGravityPop();
};

#endif	// __AKI_POINTSPRITEMANAGER_H__