#ifndef __AKI_SHOTBASE_H__
#define __AKI_SHOTBASE_H__

namespace Shot
{
	//////////////////////////////////////////////////
	// 弾の基底クラス
	//////////////////////////////////////////////////
	class CBase : virtual public IDoubleDispatch
	{
	public:	// 外部公開

		//////////////////////////////////////////////////
		// 型宣言
		//////////////////////////////////////////////////
		typedef BYTE	FLGTYPE;	// フラグ型

		//////////////////////////////////////////////////
		// フラグ定数
		//////////////////////////////////////////////////
		CONSTANT FLGTYPE	FLG_ALIVE;		// 生きてる
		CONSTANT FLGTYPE	FLG_ERASE;		// 消せ
		CONSTANT FLGTYPE	FLG_BREAK;		// 爆発
		CONSTANT FLGTYPE	FLG_BUBBLE_WRAP;// 泡に包まれている
		CONSTANT FLGTYPE	FLG_FIN_HIT;	// フィンで当てられた
		
		//////////////////////////////////////////////////
		// 定数
		//////////////////////////////////////////////////
		CONSTANT USHORT ERASE_TIME;			// 消す時間
		CONSTANT USHORT CREATE_BUBBLE_TIME;	// 泡を作る時間
		CONSTANT USHORT BREAK_ANIME_NUM;	// 爆発アニメコマ数
		CONSTANT USHORT BREAK_GRAPH_WIDTH;	// 爆発画像幅
		CONSTANT USHORT BREAK_GRAPH_HEIGHT;	// 爆発画像高さ
		CONSTANT USHORT BREAK_GRAPH_SIZE;	// 爆発爆発1コマサイズ
		CONSTANT LPSTR	BREAK_TEX_PASS;		// 爆発のテクスチャパス
		CONSTANT LPSTR	SPRITE_TEX_PASS;	// ポイントスプライト要テクスチャパス

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CBase();
		CBase( const D3DXMATRIX* mat );

		// 仮想デストラクタ
		virtual ~CBase();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う(派生先で定義)
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void Update() = 0;

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う(派生先で定義)
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void Draw( const LPDIRECT3DDEVICE9 lpdevice ) = 0;

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		描画を行う(必要ならば派生先で定義)
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice ){}

		//////////////////////////////////////////////////
		//	・関数名	BreakBubble
		//	・説明		泡を破裂させる
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void BreakBubble();

		//////////////////////////////////////////////////
		//	・関数名	SetMatrix
		//	・説明		出現させる玉の位置を設定する
		//	・引数		
		//		- mat	設定する行列
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void SetMatrix( const D3DXMATRIX& mat )
		{
			m_mMat = mat;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMatrix
		//	・説明		現在の行列を獲得
		//	・引数		なし
		//	・戻り値	行列をポインタで返す
		//////////////////////////////////////////////////
		inline const D3DXMATRIX* GetMatrix() const
		{
			return &m_mMat;
		}
		
		//////////////////////////////////////////////////
		//	・関数名	GetFlg
		//	・説明		現在の状態を獲得
		//	・引数		なし
		//	・戻り値	現在の状態を返す
		//////////////////////////////////////////////////
		inline FLGTYPE GetFlg() const 
		{
			return m_Flg; 
		}

		//////////////////////////////////////////////////
		//	・関数名	GetPos
		//	・説明		現在の位置情報を獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	現在の位置状態を返す
		//////////////////////////////////////////////////
		virtual D3DXVECTOR3 GetPos() const = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetRadius
		//	・説明		メッシュの半径を獲得
		//				(メッシュが違うので派生先で定義)
		//	・引数		なし
		//	・戻り値	メッシュの半径を返す
		//////////////////////////////////////////////////
		virtual float GetRadius() const = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetPower
		//	・説明		強さを獲得
		//				(必要ならば派生先で定義)
		//	・引数		なし
		//	・戻り値	強さを返す
		//////////////////////////////////////////////////
		virtual inline float GetPower() const 
		{
			return NULL;
		}

	protected:	// 継承先で定義するであろうメンバ

		//////////////////////////////
		// フィールド
		//////////////////////////////
		CMatrix					m_mMat;			// 行列(ローカル座標前提)
		BYTE					m_Flg;			// フラグ
		CBubbleManager			m_Bubbles;		// 泡マネージャー
		BYTE					m_AnimeCnt;		// アニメカウンタ
		CBoard					m_Board;		// 板ポリゴン

		//////////////////////////////
		// メソッド
		//////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	UpdateBreak
		//	・説明		爆発更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateBreak();

		//////////////////////////////////////////////////
		//	・関数名	DrawBreak
		//	・説明		爆発描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawBreak( const LPDIRECT3DDEVICE9 lpdevice );
	};
}

#endif // __AKI_SHOTBASE_H__