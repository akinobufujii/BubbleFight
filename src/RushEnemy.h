#ifndef __AKI_RUSHENEMY_H__
#define __AKI_RUSHENEMY_H__

namespace Enemy
{
	/////////////////////////////////
	// 突進する敵
	// 主にダメージオブジェクトを狙う
	/////////////////////////////////
	class CRush : public CBase
	{
	public:	// 外部公開

		/////////////////////////////////
		// 定数
		/////////////////////////////////
		CONSTANT ULONG	SCORE;				// この敵のスコア
		CONSTANT float	SPEED;				// 速さ
		CONSTANT float	TAIL_ROT_SPEED;		// 尻尾の速さ
		CONSTANT float	TAIL_ROT_MAX;		// 尻尾の最大回転角度
		CONSTANT float	RETURN_TAIL_SPEED;	// 尻尾の戻る速さ
		CONSTANT USHORT	CHANGE_MOVE_TIME;	// 行動を切り替える
		CONSTANT LPSTR	ENEMY_MESH_PASS;	// 敵のメッシュパス

		/////////////////////////////////
		// メソッド
		/////////////////////////////////
		
		// コンストラクタ
		CRush( float x, float y, float z );
		
		// デストラクタ
		~CRush();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//		- is_shader	プログラマブルシェーダ描画するかどうか
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		この敵のスコアを獲得
		//	・引数		なし
		//	・戻り値	この敵のスコアを返す
		//////////////////////////////////////////////////
		inline ULONG GetScore() const
		{
			return SCORE;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMesh
		//	・説明		メッシュ情報を獲得
		//	・引数		なし
		//	・戻り値	メッシュ情報を返す
		//////////////////////////////////////////////////
		inline const CXfile* GetMesh() const
		{
			return m_lpMesh;
		}

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		自分の情報を送られてきた
		//				オブジェクトに送りつける
		//	・引数		
		//		- object	このクラスの情報を送りつける
		//					オブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Dispatch( IDoubleDispatch* object )
		{
			object->Action( *this );
		}

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		プレイヤーに対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Player::CDolphin& object );
	
		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		襲うオブジェクトに対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( CDamageObjectBase& object );
		
	private:	// 非公開

		/////////////////////////////////
		// フィールド
		/////////////////////////////////
		DWORD				m_SaveTime;		// 時間記憶用変数
		CFinTail			m_Tail;			// しっぽ
		CXfile*				m_lpMesh;		// 自分のメッシュ
		float				m_NowTailRot;	// 尻尾の回転角度
	};
}

#endif // __AKI_RUSHENEMY_H__