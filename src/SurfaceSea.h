#ifndef __AKI_SURFACESEA_H__
#define __AKI_SURFACESEA_H__

//////////////////////////////////////////////////
// 不完全型宣言
//////////////////////////////////////////////////
class CWaveMapManager;

//////////////////////////////////////////////////
// 海面クラス
// ピクセルフォグ＋バンプマッピング
//////////////////////////////////////////////////
class CSurfaceSea
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 型宣言
	//////////////////////////////////////////////////
	typedef BYTE	FLGTYPE;

	//////////////////////////////////////////////////
	// フラグ定数
	//////////////////////////////////////////////////
	CONSTANT FLGTYPE	FLG_HEIGHTPLUS;	// 高さ加算しているか

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CSurfaceSea();

	// デストラクタ
	~CSurfaceSea();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		更新を行う
	//				常にプレイヤーの位置に高さ固定で
	//				位置更新する
	//	・引数		
	//		- player_pos	プレイヤーの位置	
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update( const D3DXVECTOR3& player_pos );

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		固定パイプラインで描画を行う
	//	・引数		
	//		- lp_device	デバイス	
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	DrawShader
	//	・説明		プログラマブルシェーダで描画を行う
	//	・引数		
	//		- lp_device	デバイス	
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawShader( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	SetHeight
	//	・説明		海の高さを設定する
	//	・引数		
	//		- height	高さ	
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetHeight( const float height )
	{
		m_Height = height;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetSize
	//	・説明		海の大きさを設定する
	//	・引数		
	//		- height	高さ	
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetSize( const int size )
	{
		m_SeaSize = size;
		m_SeaBoard.SetVertex( m_SeaSize, false );
	}

	//////////////////////////////////////////////////
	//	・関数名	SetColor
	//	・説明		海の色を設定する(各0〜255の範囲)
	//	・引数		
	//		- r	赤成分
	//		- g	緑成分
	//		- b	青成分
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetColor( BYTE r, BYTE g, BYTE b )
	{
		float Rate = 1.f / 0xff;

		D3DXVECTOR3 Color( Rate * r, Rate * g, Rate * b );

		m_lpBumpShader->SetValue( "g_FogColor", &Color, sizeof(D3DXVECTOR3) );
	}

private:	// 非公開

	////////////////////////////////
	// フィールド
	////////////////////////////////
	CBoard				m_SeaBoard;		// 板ポリゴン
	CVector				m_Pos;			// 位置格納
	CEffect*			m_lpBumpShader;	// バンプマッピング用シェーダ
	CWaveMapManager*	m_lpWaveMap;	// 波マップ
	BYTE				m_Flg;			// フラグ
	float				m_Height;		// 高さ
	float				m_Wave;			// 波
	float				m_SeaSize;		// 海の大きさ
	int					m_Speed;		// スクロールの速さ
	int					m_ScrollCnt;	// スクロールカウンタ
};

#endif	// __AKI_SURFACESEA_H__