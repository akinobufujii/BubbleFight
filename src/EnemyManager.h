#ifndef __AKI_ENEMYMANAGER_H__
#define __AKI_ENEMYMANAGER_H__

//////////////////////////////////////////////////
// 敵マネージャークラス
//////////////////////////////////////////////////
namespace Enemy
{
	class CManager
	{
	public:	// 外部公開

		//////////////////////////////////////////////////
		// 型宣言
		//////////////////////////////////////////////////
		typedef std::list<CBase*>	ENEMYLIST;	// 敵リスト型

		//////////////////////////////////////////////////
		// 定数
		//////////////////////////////////////////////////
		
		// 種類
		enum ENEMYKIND
		{
			KIND_NORMAL,		// 普通
			KIND_SHOT,			// 撃ってくる
			KIND_RUSH,			// 突進してくる
			KIND_BUBBLEBREAK,	// 泡を破壊する
			KIND_MAX			// 種類の最大数
		};

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CManager():m_Score( 0 ){}

		// デストラクタ
		~CManager();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	DrawAlive
		//	・説明		生きている全ての敵を描画する
		//	・引数		
		//		- lpdevice	デバイス
		//		- is_shader	プログラマブルシェーダで描画するかどうか
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawAlive( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader );

		//////////////////////////////////////////////////
		//	・関数名	DrawDie
		//	・説明		死んでいる全ての敵を描画する
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawDie( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader );

		//////////////////////////////////////////////////
		//	・関数名	DrawRipples
		//	・説明		全ての敵の波紋を描画する
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawRipples( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		全ての敵のエフェクトを描画する
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	Add
		//	・説明		敵を追加する
		//	・引数		
		//		- kind	生み出す敵の種類
		//				(ENEMYKIND列挙体から指定)
		//		- pos	生み出す位置
		//	・戻り値	生み出せたならtrue、
		//				生み出せなかったらfalseを返す
		//////////////////////////////////////////////////
		bool Add( int kind, const D3DXVECTOR3& pos );

		//////////////////////////////////////////////////
		//	・関数名	LoadFromFile
		//	・説明		ファイルから生み出す敵を読み込む
		//				関数内でAdd関数を呼んでいる
		//	・引数		
		//		- filename	読み込む敵リストのファイルパス
		//	・戻り値	ファイルが開ければtrue
		//				開けなければfalseを返す
		//////////////////////////////////////////////////
		bool LoadFromFile( LPCSTR filename );

		//////////////////////////////////////////////////
		//	・関数名	AllClear
		//	・説明		全ての敵を削除する
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void AllClear();

		//////////////////////////////////////////////////
		//	・関数名	GetList
		//	・説明		全ての敵情報が入ったリストを獲得
		//	・引数		なし
		//	・戻り値	全ての敵情報が入ったリストを返す
		//////////////////////////////////////////////////
		ENEMYLIST* GetList()
		{
			return &m_EnemyList;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		敵を撃破したスコアを獲得
		//	・引数		なし
		//	・戻り値	敵を撃破したスコアを返す
		//////////////////////////////////////////////////
		ULONG GetScore()
		{
			return m_Score;
		}

		//////////////////////////////////////////////////
		//	・関数名	IsNoneEnemy
		//	・説明		生存している敵が居ないかどうかを調べる
		//	・引数		なし
		//	・戻り値	全ての敵が居なければtrue
		//				そうでなければfalseを返す
		//////////////////////////////////////////////////
		bool IsNoneEnemy()
		{
			return m_EnemyList.empty();
		}

	private:	// 非公開

		//////////////////////////////
		// フィールド
		//////////////////////////////
		ENEMYLIST	m_EnemyList;	// 敵リスト
		ULONG		m_Score;		// スコア				
	};
}

#endif // __AKI_ENEMYMANAGER_H__