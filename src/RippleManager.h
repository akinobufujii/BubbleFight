#ifndef __AKI_RIPPLEMANAGER_H__
#define __AKI_RIPPLEMANAGER_H__

//////////////////////////////////////////////////
// 不完全型宣言
//////////////////////////////////////////////////
class CRipple;

//////////////////////////////////////////////////
// 波紋マネージャー
//////////////////////////////////////////////////
class CRippleManager
{
public:	// 外部公開

	///////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	CONSTANT LPCSTR	TEXPATH_DEFAULT_RIPPLE;		// 波紋のテクスチャパス

	///////////////////////////////////////////////////
	// 型宣言
	//////////////////////////////////////////////////
	typedef std::list<CRipple*>	RIPPLELIST;		// 波紋リスト型

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CRippleManager();

	// デストラクタ
	~CRippleManager();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		波紋の更新を行う
	//	・引数		
	//		- mat	波紋を出す対象の行列
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update( const D3DXMATRIX& mat );

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	SetCreateHeight
	//	・説明		波紋を更新、描画する高さを設定する
	//	・引数		
	//		- height	高さ
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetCreateHeight( const float height )
	{
		m_CreateHeight = height;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetSize
	//	・説明		波紋の幅高さを設定する
	//	・引数		
	//		- width		幅
	//		- height	高さ
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetSize( const float width, const float height )
	{
		m_Width = width;
		m_Height= height;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetTexture
	//	・説明		波紋のテクスチャを設定する
	//	・引数		
	//		- lp_tex	テクスチャ
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetTexture( const LPDIRECT3DTEXTURE9 lp_tex )
	{
		m_lpTex = lp_tex;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetDefaultTexture
	//	・説明		標準の波紋テクスチャを設定する
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetDefaultTexture()
	{
		m_lpTex = *CSTexManager::GetInst()->GetData( TEXPATH_DEFAULT_RIPPLE );
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	RIPPLELIST			m_RippleList;		// 波紋リスト
	float				m_Width, m_Height;	// 幅、高さ
	float				m_CreateHeight;		// 波紋を作る高さ
	LPDIRECT3DTEXTURE9	m_lpTex;			// テクスチャ

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	//////////////////////////////////////////////////
	//	・関数名	Create
	//	・説明		波紋を作成する
	//	・引数		
	//		- mat	作る元の行列
	//	・戻り値	作成した波紋クラスのポインタを返す
	//////////////////////////////////////////////////
	CRipple* Create( const D3DXMATRIX& mat );

	//////////////////////////////////////////////////
	//	・関数名	IsUpdate
	//	・説明		今、更新を行うべきかどうかを調べる
	//	・引数		
	//		- pos	今の位置
	//	・戻り値	更新を行うべきならtrue
	//				そうでなければfalse
	//////////////////////////////////////////////////
	bool IsUpdate( const D3DXVECTOR3 &pos );
};

#endif	// __AKI_RIPPLEMANAGER_H__