#ifndef __AKI_FINTAIL_H__
#define __AKI_FINTAIL_H__

//////////////////////////////////////////////////
// ヒレのような尻尾
//////////////////////////////////////////////////
class CFinTail
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// フラグ定数
	//////////////////////////////////////////////////
	CONSTANT BYTE	FLG_CNT_PLUS;	// カウンタ加算

	//////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	CONSTANT BYTE			SPEED_RATE;			// 渡された速度の補正
	CONSTANT BYTE			MOVE_MAX;			// 動きの大きさ上限
	CONSTANT float			DEFAULT_MOVE_SPEED;	// 常に動く速さ
	CONSTANT D3DXVECTOR3	DEFAULT_FARPOS;		// 指定なしの離れている位置
	CONSTANT LPSTR			MESHPASS_FIN;		// フィンのメッシュパス

	//////////////////////////////////////////////////
	// 列挙体
	//////////////////////////////////////////////////
	enum MOVETYPE
	{
		MOVE_SIDE,	// 横に動く
		MOVE_TOP	// 縦に動く
	};

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////
	
	// コンストラクタ
	CFinTail();
	
	// デストラクタ
	~CFinTail();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		親子関係方式で更新を行う
	//	・引数		
	//		- mat	親の行列
	//		- speed	親の速さ(尻尾の動く速さに影響する)
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update( const D3DXMATRIX& mat, float speed );

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9& lpdevice );

	//////////////////////////////////////////////////
	//	・関数名	DrawShader
	//	・説明		プログラマブルシェーダで描画を行う
	//				(フォンシェーディング)
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawShader( const LPDIRECT3DDEVICE9& lpdevice );

	//////////////////////////////////////////////////
	//	・関数名	GetMatrix
	//	・説明		行列を獲得する
	//	・引数		なし
	//	・戻り値	行列を返す
	//////////////////////////////////////////////////
	inline D3DXMATRIX GetMatrix() const 
	{
		return m_mMat;
	}

	//////////////////////////////////////////////////
	//	・関数名	GetMesh
	//	・説明		メッシュ情報を獲得する
	//	・引数		なし
	//	・戻り値	メッシュ情報を返す
	//////////////////////////////////////////////////
	inline CXfile* GetMesh()
	{
		return m_lpMesh;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetMesh
	//	・説明		メッシュ情報を設定する
	//	・引数		
	//		- mesh	設定するメッシュのポインタ
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetMesh( CXfile* mesh )
	{
		m_lpMesh = mesh;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetMove
	//	・説明		動き方の設定をする
	//	・引数		
	//		- type	動き方の指定
	//				MOVETYPE列挙体から指定する
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetMove( MOVETYPE type )
	{
		m_MoveType = type;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetFarPos
	//	・説明		親よりどれくらい離れて
	//				描画するかを設定する
	//	・引数		
	//		- lppos	離れる位置
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetFarPos( const D3DXVECTOR3* lppos )
	{
		m_FarPos = *lppos;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetRotMax
	//	・説明		最大回転角度を設定する
	//	・引数		
	//		- maxrot	最大回転角度
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void SetRotMax( float maxrot )
	{
		m_NowRotMax = maxrot;
	}

	//////////////////////////////////////////////////
	//	・関数名	ResetCnt
	//	・説明		動きをリセットする
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline void ResetCnt()
	{
		m_MoveCnt = 0;
		m_Flg &= ~FLG_CNT_PLUS;
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	CXfile*			m_lpMesh;			// メッシュ	
	CMatrix			m_mMat;				// 行列
	BYTE			m_Flg;				// フラグ
	MOVETYPE		m_MoveType;			// 動く方向
	D3DXVECTOR3		m_FarPos;			// 離れる位置
	CBubbleManager	m_Bubbles;			// 泡マネージャー
	bool			m_IsCreateBubble;	// 泡を出すか
	float			m_MoveCnt;			// 動くカウンタ
	float			m_NowRotMax;		// 回転角度の最高値
};

#endif // __AKI_FINTAIL_H__