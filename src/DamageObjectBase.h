#ifndef __AKI_DAMAGEOBJECTBASE_H__
#define __AKI_DAMAGEOBJECTBASE_H__

/////////////////////////////////
// 不完全型宣言
/////////////////////////////////
class CBubbleManager;

//////////////////////////////////////
// ダメージを受けるオブジェクトの基底クラス
// (抽象クラス)
//////////////////////////////////////
class CDamageObjectBase : virtual public IDoubleDispatch
{
public:	// 外部公開

	/////////////////////////////////
	// 型宣言
	/////////////////////////////////
	typedef BYTE	FLGTYPE;

	/////////////////////////////////
	// フラグ定数
	/////////////////////////////////

	//////////////////////////////////////
	// メソッド
	//////////////////////////////////////

	// コンストラクタ
	CDamageObjectBase();

	// 仮想デストラクタ
	virtual ~CDamageObjectBase();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		更新を行う(派生先で定義)
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	virtual void Update() = 0;

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		描画を行う
	//	・引数		
	//		- lpdevice	デバイス
	//		- is_shader	プログラマブルシェーダで描画するかどうか
	//	・戻り値	なし
	//////////////////////////////////////////////////
	virtual void Draw( const LPDIRECT3DDEVICE9 lp_device, bool is_shader ) = 0;
	
	//////////////////////////////////////////////////
	//	・関数名	SetPos
	//	・説明		位置を設定する
	//	・引数		
	//		- pos	出現させる位置
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline virtual void SetPos( const D3DXVECTOR3& pos )
	{
		m_mMat.SetTrans( &pos );
	}

	//////////////////////////////////////////////////
	//	・関数名	SetScale
	//	・説明		拡大率をを決める(1で通常の大きさ)
	//	・引数		
	//		- scale	拡大させる比率
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline virtual void SetScale( float scale )
	{
		m_Scale = scale;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetSpeed
	//	・説明		移動速度を設定する
	//	・引数		
	//		- speed	移動させる速度
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline virtual void SetSpeed( float speed )
	{
		m_Speed = speed;
	}

	//////////////////////////////////////////////////
	//	・関数名	SetMeshPath
	//	・説明		メッシュのパスを設定(読み込みも行う)
	//	・引数		
	//		- lp_device	移動させる速度
	//		- path		設定するメッシュパス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	inline virtual void SetMeshPath( LPDIRECT3DDEVICE9 lp_device, LPCSTR path )
	{
		m_lpMesh = CSXfileManager::GetInst()->Load( lp_device, path );
	}

	//////////////////////////////////////////////////
	//	・関数名	GetMatrix
	//	・説明		行列を獲得
	//	・引数		なし
	//	・戻り値	行列を返す
	//////////////////////////////////////////////////
	inline virtual D3DXMATRIX GetMatrix() const 
	{
		return m_mMat;
	}

	//////////////////////////////////////////////////
	//	・関数名	GetPos
	//	・説明		位置情報を獲得
	//	・引数		なし
	//	・戻り値	位置情報を返す
	//////////////////////////////////////////////////
	inline virtual D3DXVECTOR3 GetPos() const 
	{
		return m_mMat.GetPos();
	}

protected:	// 継承先共通

	/////////////////////////////////
	// フィールド
	/////////////////////////////////
	CMatrix			m_mMat;		// 行列
	CXfile*			m_lpMesh;	// メッシュ(板ポリゴンに変えるかも)
	FLGTYPE			m_Flg;		// フラグ
	float			m_Scale;	// 大きさ
	float			m_Speed;	// 移動の速さ
	CBubbleManager*	m_lpBubbles;// 泡

	/////////////////////////////////
	// メソッド
	/////////////////////////////////

	//////////////////////////////////////////////////
	//	・関数名	MustUpdate
	//	・説明		派生先で必ず呼んでほしい関数
	//				必要な更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void MustUpdate();
};

#endif	// __AKI_DAMAGEOBJECTBASE_H__