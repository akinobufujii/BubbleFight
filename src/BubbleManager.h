#ifndef __AKI_BUBBLEMANAGER_H__
#define __AKI_BUBBLEMANAGER_H__

//////////////////////////////////////////////////
// インクルード(例外)
//////////////////////////////////////////////////
#include "Bubble.h"

//////////////////////////////////////////////////
// 泡マネージャー
//////////////////////////////////////////////////
class CBubbleManager
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 型宣言
	//////////////////////////////////////////////////
	typedef std::list<CBubble*>	BUBBLELIST;	// 泡リスト型

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CBubbleManager(){}

	// デストラクタ
	~CBubbleManager();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update();

	//////////////////////////////////////////////////
	//	・関数名	DrawNoBreak
	//	・説明		割れていない泡を描画する
	//	・引数		
	//		- lpdevice	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawNoBreak( const LPDIRECT3DDEVICE9& lpdevice );

	//////////////////////////////////////////////////
	//	・関数名	DrawBreak
	//	・説明		割れている泡を描画する
	//	・引数		
	//		- lpdevice	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawBreak( const LPDIRECT3DDEVICE9& lpdevice );

	//////////////////////////////////////////////////
	//	・関数名	Add
	//	・説明		泡を追加する
	//	・引数		
	//		- mat	出現位置の入った行列
	//		- num	追加する数
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Add( const D3DXMATRIX* mat, int num );

	//////////////////////////////////////////////////
	//	・関数名	BreakAll
	//	・説明		全ての泡を破裂させる
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void BreakAll();

	//////////////////////////////////////////////////
	//	・関数名	GetList
	//	・説明		泡の入ったリストを返す
	//	・引数		なし
	//	・戻り値	泡情報の入ったリストをポインタで返す
	//////////////////////////////////////////////////
	inline BUBBLELIST* GetList()
	{
		return &m_BubbleList;
	}

	//////////////////////////////////////////////////
	//	・関数名	IsEmpty
	//	・説明		泡が空かどうかを返す
	//	・引数		なし
	//	・戻り値	空ならtrue、
	//				そうでなければfalseを返す
	//////////////////////////////////////////////////
	inline bool IsEmpty()
	{
		return m_BubbleList.empty();
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	BUBBLELIST		m_BubbleList;	// 泡リスト

	//////////////////////////////////////////////////
	// メモリープールフィールド
	//////////////////////////////////////////////////
	boost::object_pool<CBubble>	m_mpBubble;		// 泡のメモリープール
};

#endif // __AKI_BUBBLEMANAGER_H__