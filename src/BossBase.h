#ifndef __AKI_BOSSBASE_H__
#define __AKI_BOSSBASE_H__

//////////////////////////////////////////////////
// 不完全型宣言
//////////////////////////////////////////////////
class CStoneManager;

namespace Boss
{
	//////////////////////////////////////////////////
	// ボス基底クラス
	//////////////////////////////////////////////////
	class CBase : public IDoubleDispatch
	{
	public:	// 外部公開

		//////////////////////////////////////////////////
		// フラグ定数
		//////////////////////////////////////////////////
		typedef BYTE FLGTYPE;	// フラグの型

		CONSTANT FLGTYPE	FLG_ALIVE;	// 生きている
		CONSTANT FLGTYPE	FLG_BREAK;	// 破壊されている
		CONSTANT FLGTYPE	FLG_ERASE;	// 消すべき
		CONSTANT FLGTYPE	FLG_STOP;	// 止まる
		CONSTANT FLGTYPE	FLG_ATTACK;	// 攻撃の種類を選ぶ
		CONSTANT FLGTYPE	FLG_STICK;	// 岩に刺さっている
		CONSTANT FLGTYPE	FLG_DAMAGE;	// ダメージを受けている
		CONSTANT FLGTYPE	FLG_WAIT;	// 待っている

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CBase();

		// 仮想デストラクタ
		virtual ~CBase(){}

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う(派生先で定義)
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void Update() = 0;

		//////////////////////////////////////////////////
		//	・関数名	UpdateEnterScene
		//	・説明		登場更新を行う(派生先で定義)
		//	・引数		なし
		//	・戻り値	終了ならtrue、終わりならfalseを返す
		//////////////////////////////////////////////////
		virtual bool UpdateEnterScene() = 0;

		//////////////////////////////////////////////////
		//	・関数名	UpdateMovement
		//	・説明		行動更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateMovement();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う(派生先で定義)
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void Draw( const LPDIRECT3DDEVICE9 lpdevice ) = 0;

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクト描画を行う(派生先で定義)
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice ) = 0;

		//////////////////////////////////////////////////
		//	・関数名	DrawShader
		//	・説明		プログマブルシェーダで描画を行う(派生先で定義)
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		virtual void DrawShader( const LPDIRECT3DDEVICE9 lpdevice ) = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetShotManager
		//	・説明		弾マネージャーを返す
		//	・引数		なし
		//	・戻り値	情報があるならポインタを、無ければNULL
		//////////////////////////////////////////////////
		inline virtual Shot::CManager* GetShotManager()
		{
			return NULL;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMatrix
		//	・説明		行列を返す(派生先で定義)
		//	・引数		なし
		//	・戻り値	派生先の行列を返す
		//////////////////////////////////////////////////
		virtual D3DXMATRIX GetMatrix() const = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetPos
		//	・説明		位置を返す(派生先で定義)
		//	・引数		なし
		//	・戻り値	派生先の位置を返す
		//////////////////////////////////////////////////
		virtual D3DXVECTOR3 GetPos() const = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetAddColorRate
		//	・説明		爆発ブラーの光の強さを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	爆発ブラーの光の強さを返す
		//////////////////////////////////////////////////
		virtual float GetAddColorRate() = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		ボスのスコアを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	ボスのスコアを返す
		//////////////////////////////////////////////////
		virtual ULONG GetScore() const = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetBlurPower
		//	・説明		爆発ブラーの強さを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	爆発ブラーの強さを返す
		//////////////////////////////////////////////////
		virtual float GetBlurPower() = 0;

		//////////////////////////////////////////////////
		//	・関数名	GetBGMName
		//	・説明		再生するBGMのパスを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	再生するBGMのパスを返す
		//////////////////////////////////////////////////
		virtual LPCSTR GetBGMName() const = 0;		

		//////////////////////////////////////////////////
		//	・関数名	GetFlg
		//	・説明		フラグを返す
		//	・引数		なし
		//	・戻り値	状態(フラグ)を返す
		//////////////////////////////////////////////////
		inline FLGTYPE GetFlg() const
		{
			return m_Flg;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetRadius
		//	・説明		半径を獲得
		//	・引数		なし
		//	・戻り値	半径を返す
		//////////////////////////////////////////////////
		inline float GetRadius() const 
		{
			return m_lpMesh->GetRadius() / 2;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetCenter
		//	・説明		中心位置を獲得する
		//	・引数		なし
		//	・戻り値	中心位置を返す
		//////////////////////////////////////////////////
		inline D3DXVECTOR3 GetCenter() const
		{
			return m_lpMesh->GetCenter();
		}

		//////////////////////////////////////////////////
		//	・関数名	IsDie
		//	・説明		死んだかどうかを調べる
		//	・引数		なし
		//	・戻り値	死んでいればtrue、そうでなければfalse
		//////////////////////////////////////////////////
		inline virtual bool IsDie()
		{
			return (m_Flg & FLG_ERASE)? true : false;
		}

		//////////////////////////////////////////////////
		//	・関数名	SetPlayerMat
		//	・説明		プレイヤーの行列を設定する
		//	・引数		
		//		- mat	プレイヤーの行列
		//	・戻り値	なし
		//////////////////////////////////////////////////
		inline static void SetPlayerMat( const D3DXMATRIX* lp_mat )
		{
			m_PlayerMat = *lp_mat;
		}

		//////////////////////////////////////////////////
		//	・関数名	SetStoneManager
		//	・説明		衝突判定を行うための岩マネージャーを設定する
		//				全ての継承先に影響する
		//	・引数		
		//		lpstones	岩マネージャーのポインタ
		//	・戻り値	なし
		//////////////////////////////////////////////////
		static void SetStoneManager( CStoneManager* lpstones )
		{
			m_lpStones = lpstones;
		}


	protected:	// 共通メンバ

		//////////////////////////////////////////////////
		// 型定義
		//////////////////////////////////////////////////
		typedef bool (CBase::*LPMOVEMENTFANC)();			// 行動用関数ポインタ
		typedef std::list<LPMOVEMENTFANC>	MOVEMENTLIST;	// 行動関数リスト

		//////////////////////////////////////////////////
		// フィールド
		//////////////////////////////////////////////////
		//CMatrix			m_mMat;		// 座標行列(ローカル前提)
		CXfile*			m_lpMesh;	// メッシュ
		short			m_HP;		// ライフ
		FLGTYPE			m_Flg;		// フラグ
	
		static CMatrix	m_PlayerMat;	// プレイヤーの行列

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	GetStones
		//	・説明		設定されている岩マネージャーを獲得する
		//	・引数		なし
		//	・戻り値	設定されている岩マネージャーを返す
		//////////////////////////////////////////////////
		static CStoneManager* GetStones()
		{ 
			return m_lpStones;
		}
	
	private:	// 非公開

		//////////////////////////////////////////////////
		// フィールド
		//////////////////////////////////////////////////
		MOVEMENTLIST			m_MovementList;	// 行動リスト
		MOVEMENTLIST::iterator	m_NowMovement;	// 今の行動
		static CStoneManager*	m_lpStones;		// 岩マネージャー
	};
}

#endif // __AKI_BOSSBASE_H__