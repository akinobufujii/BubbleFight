#ifndef __AKI_STONEMANAGER_H__
#define __AKI_STONEMANAGER_H__

//////////////////////////////////////////////////
// 岩マネージャー
// (基本何もしない)
//////////////////////////////////////////////////
class CStoneManager
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	CONSTANT UINT	RENDERTARGET_SIZE;	// レンダーターゲットの大きさ
	CONSTANT DWORD	CLEAR_TARGET_TIME;	// レンダーターゲット初期化の時間

	//////////////////////////////////////////////////
	// 内部構造体
	//////////////////////////////////////////////////
	
	// 岩データ
	struct STONEDATA
	{
		D3DXVECTOR3		Pos;	// 位置
		CXfile*			lpMesh;	// メッシュパス
		float			Scale;	// 大きさ
	};

	//////////////////////////////////////////////////
	// 型宣言
	//////////////////////////////////////////////////
	typedef std::list<STONEDATA*>	STONELIST;	// 岩リスト型

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CStoneManager();

	// デストラクタ
	~CStoneManager();

	//////////////////////////////////////////////////
	//	・関数名	LoadFromData
	//	・説明		岩の情報をファイルから読み込む
	//	・引数		
	//		- lp_device	デバイス
	//		- path		読み込むファイルのパス
	//	・戻り値	読込できればtrue
	//				そうでなければfalseを返す
	//////////////////////////////////////////////////
	bool LoadFromData( const LPDIRECT3DDEVICE9 lp_device, LPCSTR path );

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		固定パイプラインで描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	DrawShader
	//	・説明		プログラマブルシェーダで描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void DrawShader( const LPDIRECT3DDEVICE9 lp_device );

	//////////////////////////////////////////////////
	//	・関数名	Release
	//	・説明		現在読み込んでいるデータを
	//				全て解放する
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Release();

	//////////////////////////////////////////////////
	//	・関数名	GetList
	//	・説明		現在の岩の情報リストを獲得
	//	・引数		なし
	//	・戻り値	現在の岩の情報リストのポインタを返す
	//////////////////////////////////////////////////
	inline STONELIST* GetList()
	{
		return &m_StoneList;
	}

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	STONELIST	m_StoneList;		// 岩データリスト

	CEffect*	m_lpCausticShader;	// コースティックシェーダ
	CEffect*	m_lpWaveShader;		// 波マップ作成シェーダ

	CTexture	m_WaveTex;			// 波マップ
	CTexture	m_BumpTex;			// 法線マップ
	CTexture	m_CausticTex;		// コースティックマップ
	
	CBoard		m_Borad;			// 板ポリゴン

	DWORD		m_SaveClearTime;	// レンダーターゲット初期化時間保存用

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	//////////////////////////////////////////////////
	//	・関数名	CreateCausticMap
	//	・説明		コースティックマップを生成する
	//				波マップの更新も行う
	//				内部で3回レンダリングを行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void CreateCausticMap( const LPDIRECT3DDEVICE9 lp_device );
};

#endif	// __AKI_STONEMANAGER_H__