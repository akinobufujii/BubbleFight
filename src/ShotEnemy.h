#ifndef __AKI_SHOTENEMY_H__
#define __AKI_SHOTENEMY_H__

namespace Enemy
{
	/////////////////////////////
	// 弾を撃ってくる敵
	/////////////////////////////
	class CShoot : public CBase
	{
	public:	// 外部公開

		/////////////////////////////
		// 定数
		/////////////////////////////
		CONSTANT ULONG	SCORE;				// スコア
		CONSTANT LPSTR	ENEMY_MESH_PASS;	// 敵のメッシュパス	
		
		const UINT	SHOT_INTERVAL;			// 撃ち出す間隔

		/////////////////////////////
		// メソッド
		/////////////////////////////

		// コンストラクタ
		CShoot( float x, float y, float z );

		// デストラクタ
		~CShoot();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//		- is_shader	プログラマブルシェーダ描画するかどうか
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		この敵のスコアを獲得
		//	・引数		なし
		//	・戻り値	この敵のスコアを返す
		//////////////////////////////////////////////////
		inline ULONG GetScore() const
		{
			return SCORE;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetShotManager
		//	・説明		弾マネージャーを獲得
		//	・引数		なし
		//	・戻り値	弾マネージャーを返す
		//////////////////////////////////////////////////
		inline Shot::CManager* GetShotManager()
		{
			return &m_Shots;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMesh
		//	・説明		メッシュ情報を獲得
		//	・引数		なし
		//	・戻り値	メッシュ情報を返す
		//////////////////////////////////////////////////
		inline const CXfile* GetMesh() const
		{
			return m_lpMesh;
		}

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		自分の情報を送られてきた
		//				オブジェクトに送りつける
		//	・引数		
		//		- object	このクラスの情報を送りつける
		//					オブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		inline void Dispatch( IDoubleDispatch* object )
		{
			object->Action( *this );
		}

	private:	// 非公開

		//////////////////////////////////////////////////
		// フィールド
		//////////////////////////////////////////////////
		DWORD			m_ShotSaveTime;	// 撃つ感覚の時間保存用
		Shot::CManager	m_Shots;		// 弾マネージャ
		CXfile*			m_lpMesh;		// 自分のメッシュ

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	UpdateShot
		//	・説明		撃つ更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateShot();
	};

}

#endif // __AKI_SHOTENEMY_H__