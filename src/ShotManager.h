#ifndef __AKI_SHOTMANAGER_H__
#define __AKI_SHOTMANAGER_H__

//////////////////////////////////////////////////
// インクルード(例外) 
//////////////////////////////////////////////////
#include "ShotBase.h"
#include "NormalShot.h"
#include "PowerShot.h"
#include "BigShot.h"
#include "BubbleRing.h"

namespace Shot
{
	//////////////////////////////////////////////////
	// 弾マネージャー
	//////////////////////////////////////////////////
	class CManager
	{
	public:	// 外部公開

		//////////////////////////////////////////////////
		// 型宣言
		//////////////////////////////////////////////////
		typedef std::list<CBase*> SHOTLIST;

		//////////////////////////////////////////////////
		// 定数
		//////////////////////////////////////////////////

		// 種類
		enum KIND
		{
			NORMAL,
			POWER,
			BIG,
			BUBBLERING
		};

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CManager(){}

		// デストラクタ
		~CManager();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpDevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクト描画を行う
		//	・引数		
		//		- lpDevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	Add
		//	・説明		弾を追加する
		//	・引数		
		//		- kind	追加する弾の種類
		//		- mat	出す位置の行列
		//		- power	強さ(バブルリング以外は無視)
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Add( KIND kind, const D3DXMATRIX* mat, const float power = 0.f );

		//////////////////////////////////////////////////
		//	・関数名	GetList
		//	・説明		弾情報の入ったリストを獲得
		//	・引数		なし
		//	・戻り値	弾情報の入ったリストを返す
		//////////////////////////////////////////////////
		SHOTLIST* GetList()
		{
			return &m_ShotList;
		}

	private:	// 非公開

		//////////////////////////////////////////////////
		// フィールド
		//////////////////////////////////////////////////
		SHOTLIST	m_ShotList;		// 弾リスト

		//////////////////////////////////////////////////
		// メモリープールフィールド
		//////////////////////////////////////////////////
		boost::object_pool<CNormal>		m_mpNormal;		// ノーマルショット用メモリープール
		boost::object_pool<CPower>		m_mpPower;		// パワーショット用メモリープール
		boost::object_pool<CBig>		m_mpBig;		// ビッグショット用メモリープール
		boost::object_pool<CBubbleRing>	m_mpBubbleRing;	// バブルリング用メモリープール

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	DeleteObjectByPool
		//	・説明		メモリープールからオブジェクトを削除する
		//				dynamic_castを行いながら削除する
		//	・引数		
		//		- object	弾オブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DeleteObjectByPool( CBase* object );
	};
}

#endif // __AKI_SHOTMANAGER_H__