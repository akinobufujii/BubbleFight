#ifndef __AKI_HARDBORDER_H__
#define __AKI_HARDBORDER_H__

namespace Boss
{
	//////////////////////////////////////////////////
	// ボス　・ハードボーダー
	// ・概要
	// 　やたら固いボス
	//////////////////////////////////////////////////
	class CHardBorder : public CBase
	{
	public:	// 外部公開

		//////////////////////////////////////////////////
		// 定数
		//////////////////////////////////////////////////
		CONSTANT int	HP_MAX;				// ライフ
		CONSTANT float	MOVE_SPEED;			// 速さ
		CONSTANT float	ROT_MAX;			// 曲がる最大値
		CONSTANT USHORT	SHOT_INTERVAL;		// 撃った後のディレイ
		CONSTANT USHORT	SLUG_TIME;			// 散弾をうつ時間の長さ
		CONSTANT USHORT NEXT_MOVEMENT_TIME;	// 次の行動に移る時間
		CONSTANT BYTE	SHOT_NUM;			// 撃つ弾の数
		CONSTANT USHORT	STOP_TIME;			// 行動を止める時間
		CONSTANT float	COLORFADEOUT_SPEED;	// 色の減算速度

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		// コンストラクタ
		CHardBorder( const LPDIRECT3DDEVICE9 lpdevice );

		// デストラクタ
		~CHardBorder();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	UpdateEnterScene
		//	・説明		登場更新を行う
		//	・引数		なし
		//	・戻り値	終了ならtrue、終わりならfalseを返す
		//////////////////////////////////////////////////
		virtual bool UpdateEnterScene();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクト描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	DrawShader
		//	・説明		プログマブルシェーダで描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawShader( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		送られてきたオブジェクトに自分を送りつける
		//	・引数		
		//		- object	行動を起こして欲しいオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Dispatch( IDoubleDispatch* object )
		{
			object->Action( *this );
		}

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		弾に対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Shot::CBase& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		プレイヤーに対する行動(Dispatchからのみ呼ばれる)
		//	・引数		
		//		- object	行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Player::CDolphin& object );

		//////////////////////////////////////////////////
		//	・関数名	GetShotManager
		//	・説明		弾のマネージャーを獲得
		//	・引数		なし
		//	・戻り値	マネージャーのポインタ
		//////////////////////////////////////////////////
		inline Shot::CManager* GetShotManager()
		{
			return &m_Shots;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMatrix
		//	・説明		行列を獲得
		//	・引数		なし
		//	・戻り値	親の行列を返す
		//////////////////////////////////////////////////
		inline D3DXMATRIX GetMatrix() const
		{
			return m_lpmParents[ m_Basis ];
		}

		//////////////////////////////////////////////////
		//	・関数名	GetPos
		//	・説明		位置を獲得
		//	・引数		なし
		//	・戻り値	親の位置を返す
		//////////////////////////////////////////////////
		inline D3DXVECTOR3 GetPos() const
		{
			return m_lpmParents[ m_Basis ].GetPos();
		}

		//////////////////////////////////////////////////
		//	・関数名	GetAddColorRate
		//	・説明		爆発ブラーの光の強さを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	爆発ブラーの光の強さを返す
		//////////////////////////////////////////////////
		float GetAddColorRate();

		//////////////////////////////////////////////////
		//	・関数名	GetBlurPower
		//	・説明		爆発ブラーの強さを獲得(派生先で定義)
		//	・引数		なし
		//	・戻り値	爆発ブラーの強さを返す
		//////////////////////////////////////////////////
		float GetBlurPower();

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		このボスのスコアを獲得
		//	・引数		なし
		//	・戻り値	このボスのスコアを返す
		//////////////////////////////////////////////////
		ULONG GetScore() const
		{
			return 1000;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetBGMName
		//	・説明		再生するBGMのパスを獲得
		//	・引数		なし
		//	・戻り値	再生するBGMのパスを返す
		//////////////////////////////////////////////////
		virtual LPCSTR GetBGMName() const
		{
			return "Sound/HardBoraderBGM.wav";
		}

	private:	// 非公開

		//////////////////////////////
		// 型宣言
		//////////////////////////////
		typedef bool (CHardBorder::*FPMOVEMENTFANC)();				// 行動関数用、関数ポインタ型
		typedef	std::list<CPointSpriteManager*>		POINTSPRITELIST;// ポイントスプライトリスト
		typedef std::list<FPMOVEMENTFANC>			MOVEMENTLIST;	// 行動リスト

		//////////////////////////////
		// フィールド
		//////////////////////////////
		BYTE					m_SaveMovement;		// 前回の行動保存用
		DWORD					m_SaveTime;			// 時間保存用
		BYTE					m_ShotCnt;			// 撃った数
		Shot::CManager			m_Shots;			// 弾
		CBoard					m_Board;			// 板ポリゴン
		MOVEMENTLIST			m_MovementList;		// 行動リスト
		MOVEMENTLIST::iterator	m_NowMovement;		// 今の行動
		POINTSPRITELIST			m_PointSpriteList;	// ポイントスプライトリスト
		CMatrix*				m_lpmParents;		// 親子関係用行列(動的配列で確保)
		CVector*				m_lpMeshPos;		// メッシュの位置情報(動的配列で確保)
		std::string*			m_lpMeshPath;		// メッシュのパス(動的配列で確保)
		BYTE					m_Basis;			// 親となる基準の添字
		BYTE					m_PartsMax;			// 親子関係最大数
		CFinTail*				m_lpTails;			// 尻尾(動的配列で確保)
		BYTE					m_TailsMax;			// 尻尾数
		float					m_NowMoveSpeed;		// 今の移動速度
		DWORD					m_SaveStopTime;		// 止まった時間を記憶する
		D3DXCOLOR				m_AddColor;			// 自分の加算する色
		DWORD					m_StartBreakTime;	// 壊れ始めた時間
		char					m_AnimeCnt;			// アニメカウンタ
		DWORD					m_BreakAddTime;		// 破裂時に加算する時間保存用

		//////////////////////////////////////////////////
		// メソッド
		//////////////////////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	UpdateMove
		//	・説明		動きを更新する
		//	・引数		なし
		//	・戻り値	行動終了ならfalse、それ以外はtrueを返す
		//////////////////////////////////////////////////
		bool UpdateMove();

		//////////////////////////////////////////////////
		//	・関数名	UpdateRush
		//	・説明		突進の更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateRush();

		//////////////////////////////////////////////////
		//	・関数名	UpdateStick
		//	・説明		刺さっている更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateStick();

		//////////////////////////////////////////////////
		//	・関数名	UpdateShot
		//	・説明		弾の更新する
		//	・引数		なし
		//	・戻り値	行動終了ならfalse、それ以外はtrueを返す
		//////////////////////////////////////////////////
		bool UpdateShot();

		//////////////////////////////////////////////////
		//	・関数名	UpdateSlug
		//	・説明		散弾の更新をする
		//	・引数		なし
		//	・戻り値	行動終了ならfalse、それ以外はtrueを返す
		//////////////////////////////////////////////////
		bool UpdateSlug();

		//////////////////////////////////////////////////
		//	・関数名	Turn
		//	・説明		振り向く更新をする
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Turn();

		//////////////////////////////////////////////////
		//	・関数名	LoadData
		//	・説明		内容を読み込む
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void LoadData();

		//////////////////////////////////////////////////
		//	・関数名	AddSprite
		//	・説明		ポイントスプライトの追加を行う
		//	・引数		
		//		- pos	追加する位置
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void AddSprite( const D3DXVECTOR3& pos );

		//////////////////////////////////////////////////
		//	・関数名	ReformPose
		//	・説明		水面に対して姿勢を正す
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void ReformPose();

		//////////////////////////////////////////////////
		//	・関数名	MoveCollision
		//	・説明		衝突判定しながら進む
		//	・引数		
		//		- move	進む方向(量も含む)
		//	・戻り値	当たったならtrueそうでないならfalseを返す
		//////////////////////////////////////////////////
		bool MoveCollision( const D3DXVECTOR3& move, bool is_move );

		//////////////////////////////////////////////////
		//	・関数名	InitLoop
		//	・説明		毎ループ行う初期化
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void InitLoop();

		//////////////////////////////////////////////////
		//	・関数名	DrawBreak
		//	・説明		破壊時の描画
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawBreak( LPDIRECT3DDEVICE9 lpdevice );
	};

}

#endif // __AKI_HARDBORDER_H__