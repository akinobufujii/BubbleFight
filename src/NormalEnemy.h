#ifndef __AKI_NORMALENEMY_H__
#define __AKI_NORMALENEMY_H__

namespace Enemy
{
	////////////////////////////////
	// 普通の敵クラス
	////////////////////////////////
	class CNormal : public CBase
	{
	public:	// 外部公開

		////////////////////////////////
		// 定数
		////////////////////////////////
		CONSTANT float	SPEED;				// 速さ
		CONSTANT float	ROT_SPEED;			// 回転速度	
		CONSTANT ULONG	SCORE;				// スコア
		CONSTANT LPSTR	ENEMY_MESH_PASS;	// 敵のメッシュパス
		CONSTANT DWORD	AWAY_TIME;			// 攻撃してからまた攻撃に移るまでの時間
		CONSTANT DWORD	CHANGE_ATTACK_TIME;	// 攻撃に移る時間

		////////////////////////////////
		// メソッド
		////////////////////////////////

		// コンストラクタ
		CNormal( float x, float y, float z );

		// デストラクタ
		~CNormal();

		//////////////////////////////////////////////////
		//	・関数名	Update
		//	・説明		更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////
		//	・関数名	Draw
		//	・説明		描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//		- is_shader	プログラマブルシェーダ描画するかどうか
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Draw( const LPDIRECT3DDEVICE9 lpdevice, bool is_shader);

		//////////////////////////////////////////////////
		//	・関数名	DrawEffect
		//	・説明		エフェクトの描画を行う
		//	・引数		
		//		- lpdevice	デバイス
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void DrawEffect( const LPDIRECT3DDEVICE9 lpdevice );

		//////////////////////////////////////////////////
		//	・関数名	GetScore
		//	・説明		この敵のスコアを獲得
		//	・引数		なし
		//	・戻り値	この敵のスコアを返す
		//////////////////////////////////////////////////
		inline ULONG GetScore() const
		{
			return SCORE;
		}

		//////////////////////////////////////////////////
		//	・関数名	GetMesh
		//	・説明		メッシュ情報を獲得
		//	・引数		なし
		//	・戻り値	メッシュ情報を返す
		//////////////////////////////////////////////////
		inline const CXfile* GetMesh() const
		{
			return m_lpMesh;
		}

		//////////////////////////////////////////////////
		//	・関数名	Dispatch
		//	・説明		自分の情報を送られてきた
		//				オブジェクトに送りつける
		//	・引数		
		//		- object	このクラスの情報を送りつける
		//					オブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Dispatch( IDoubleDispatch* object )
		{
			object->Action( *this );
		}

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		プレイヤーに対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( Player::CDolphin& object );

		//////////////////////////////////////////////////
		//	・関数名	Action
		//	・説明		襲うオブジェクトに対しての行動を起こす
		//				Dispatchから呼ばれる
		//	・引数		行動を起こす対象のオブジェクト
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void Action( CDamageObjectBase& object );

	private:	// 非公開

		////////////////////////////////
		// フィールド
		////////////////////////////////
		BYTE		m_AnimeCnt;			// アニメーションカウンタ
		CFinTail	m_Tail;				// しっぽ
		CXfile*		m_lpMesh;			// 自分のメッシュ
		bool		m_IsAway;			// 逃げているか
		bool		m_IsAttack;			// 攻撃しようとしているか
		DWORD		m_StartAwayTime;	// 逃げ始めた時間保存用
		DWORD		m_ViewSaveTime;		// 画面に映ってる時間保存用

		////////////////////////////////
		// メソッド
		////////////////////////////////

		//////////////////////////////////////////////////
		//	・関数名	UpdateAway
		//	・説明		逃げる更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateAway();

		//////////////////////////////////////////////////
		//	・関数名	UpdateDrive
		//	・説明		追いかける更新を行う
		//	・引数		なし
		//	・戻り値	なし
		//////////////////////////////////////////////////
		void UpdateDrive();
	};
}

#endif // __AKI_NORMALENEMY_H__