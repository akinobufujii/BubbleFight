#ifndef __AKI_SUNLINE_H__
#define __AKI_SUNLINE_H__

//////////////////////////////////////////////////
// 太陽線
//////////////////////////////////////////////////
class CSunLine
{
public:	// 外部公開

	//////////////////////////////////////////////////
	// 定数
	//////////////////////////////////////////////////
	CONSTANT float	SUNLINE_WIDTH;		// 日光線の幅
	CONSTANT float	SUNLINE_HALFWIDTH;	// 日光線の半分の幅
	CONSTANT float	BOTTOM_POS;			// 下側のズレ

	//////////////////////////////////////////////////
	// メソッド
	//////////////////////////////////////////////////

	// コンストラクタ
	CSunLine();

	// デストラクタ
	~CSunLine();

	//////////////////////////////////////////////////
	//	・関数名	Update
	//	・説明		更新を行う
	//	・引数		なし
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Update();

	//////////////////////////////////////////////////
	//	・関数名	Draw
	//	・説明		描画を行う
	//	・引数		
	//		- lp_device	デバイス
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void Draw( const LPDIRECT3DDEVICE9 lp_device ) const ;

	//////////////////////////////////////////////////
	//	・関数名	SetPos
	//	・説明		出す位置を決定する
	//	・引数		
	//		- pos	出現位置
	//	・戻り値	なし
	//////////////////////////////////////////////////
	void SetPos( const D3DXVECTOR3& pos );

private:	// 非公開

	//////////////////////////////////////////////////
	// フィールド
	//////////////////////////////////////////////////
	CBoard		m_Borad;			// 板ポリゴン
	short		m_NowBoradAlpha;	// 板ポリゴンのアルファ値
	const BYTE	m_ALPHASPEED;		// アルファ値の速度
	bool		m_IsAddAlpha;		// フェードイン・アウトの
	CVector		m_Pos;				// 位置
};

#endif	// __AKI_SUNLINE_H__